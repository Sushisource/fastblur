extern crate lodepng;
extern crate rayon;

use lodepng::{Bitmap, RGBA};
use rayon::prelude::*;
use std::fs::File;
use std::io::prelude::*;

fn main() -> std::io::Result<()> {
    let image = lodepng::decode32_file("in.png");
    match image {
        Ok(img) => {
            println!("Image: {:?}", img);
            let w = img.width;
            let h = img.height;
            let blurred = blur(img);
            println!("Blur done.");
            let bmp = make_bmp(blurred, w, h);
            println!("BMP encoded.");
            File::create("out.bmp")?.write(bmp.as_slice())?;
            println!("BMP written.");
//            lodepng::encode32_file("out.png", &blurred, w, h);
        }
        Err(e) => { eprintln!("Error reading image: {}", e) }
    }
    Ok(())
}

const KERN_SIZ: usize = 35;
const BLUR_KERNEL: [[f32; KERN_SIZ]; KERN_SIZ] = [
    [0.000001, 0.000002, 0.000004, 0.000005, 0.000008, 0.000011, 0.000015, 0.00002, 0.000026, 0.000033, 0.000041, 0.000049, 0.000057, 0.000065, 0.000071, 0.000077, 0.00008, 0.000081, 0.00008, 0.000077, 0.000071, 0.000065, 0.000057, 0.000049, 0.000041, 0.000033, 0.000026, 0.00002, 0.000015, 0.000011, 0.000008, 0.000005, 0.000004, 0.000002, 0.000001],
    [0.000002, 0.000004, 0.000006, 0.000008, 0.000012, 0.000017, 0.000024, 0.000032, 0.000042, 0.000053, 0.000065, 0.000078, 0.00009, 0.000103, 0.000113, 0.000121, 0.000126, 0.000128, 0.000126, 0.000121, 0.000113, 0.000103, 0.00009, 0.000078, 0.000065, 0.000053, 0.000042, 0.000032, 0.000024, 0.000017, 0.000012, 0.000008, 0.000006, 0.000004, 0.000002],
    [0.000004, 0.000006, 0.000009, 0.000013, 0.000019, 0.000027, 0.000037, 0.000049, 0.000064, 0.000081, 0.0001, 0.000119, 0.000139, 0.000158, 0.000174, 0.000186, 0.000194, 0.000197, 0.000194, 0.000186, 0.000174, 0.000158, 0.000139, 0.000119, 0.0001, 0.000081, 0.000064, 0.000049, 0.000037, 0.000027, 0.000019, 0.000013, 0.000009, 0.000006, 0.000004],
    [0.000005, 0.000008, 0.000013, 0.000019, 0.000028, 0.00004, 0.000055, 0.000073, 0.000096, 0.000121, 0.000149, 0.000178, 0.000208, 0.000235, 0.000259, 0.000278, 0.00029, 0.000294, 0.00029, 0.000278, 0.000259, 0.000235, 0.000208, 0.000178, 0.000149, 0.000121, 0.000096, 0.000073, 0.000055, 0.00004, 0.000028, 0.000019, 0.000013, 0.000008, 0.000005],
    [0.000008, 0.000012, 0.000019, 0.000028, 0.000041, 0.000058, 0.00008, 0.000107, 0.000139, 0.000176, 0.000217, 0.000259, 0.000302, 0.000342, 0.000377, 0.000404, 0.000421, 0.000427, 0.000421, 0.000404, 0.000377, 0.000342, 0.000302, 0.000259, 0.000217, 0.000176, 0.000139, 0.000107, 0.00008, 0.000058, 0.000041, 0.000028, 0.000019, 0.000012, 0.000008],
    [0.000011, 0.000017, 0.000027, 0.00004, 0.000058, 0.000082, 0.000113, 0.000151, 0.000197, 0.000249, 0.000306, 0.000367, 0.000427, 0.000484, 0.000533, 0.000571, 0.000596, 0.000604, 0.000596, 0.000571, 0.000533, 0.000484, 0.000427, 0.000367, 0.000306, 0.000249, 0.000197, 0.000151, 0.000113, 0.000082, 0.000058, 0.00004, 0.000027, 0.000017, 0.000011],
    [0.000015, 0.000024, 0.000037, 0.000055, 0.00008, 0.000113, 0.000155, 0.000208, 0.00027, 0.000342, 0.000421, 0.000504, 0.000587, 0.000665, 0.000733, 0.000786, 0.000819, 0.000831, 0.000819, 0.000786, 0.000733, 0.000665, 0.000587, 0.000504, 0.000421, 0.000342, 0.00027, 0.000208, 0.000155, 0.000113, 0.00008, 0.000055, 0.000037, 0.000024, 0.000015],
    [0.00002, 0.000032, 0.000049, 0.000073, 0.000107, 0.000151, 0.000208, 0.000278, 0.000362, 0.000458, 0.000564, 0.000675, 0.000786, 0.00089, 0.000981, 0.001051, 0.001096, 0.001111, 0.001096, 0.001051, 0.000981, 0.00089, 0.000786, 0.000675, 0.000564, 0.000458, 0.000362, 0.000278, 0.000208, 0.000151, 0.000107, 0.000073, 0.000049, 0.000032, 0.00002],
    [0.000026, 0.000042, 0.000064, 0.000096, 0.000139, 0.000197, 0.00027, 0.000362, 0.000471, 0.000596, 0.000733, 0.000878, 0.001023, 0.001158, 0.001276, 0.001368, 0.001426, 0.001446, 0.001426, 0.001368, 0.001276, 0.001158, 0.001023, 0.000878, 0.000733, 0.000596, 0.000471, 0.000362, 0.00027, 0.000197, 0.000139, 0.000096, 0.000064, 0.000042, 0.000026],
    [0.000033, 0.000053, 0.000081, 0.000121, 0.000176, 0.000249, 0.000342, 0.000458, 0.000596, 0.000754, 0.000928, 0.001111, 0.001294, 0.001466, 0.001615, 0.001731, 0.001805, 0.00183, 0.001805, 0.001731, 0.001615, 0.001466, 0.001294, 0.001111, 0.000928, 0.000754, 0.000596, 0.000458, 0.000342, 0.000249, 0.000176, 0.000121, 0.000081, 0.000053, 0.000033],
    [0.000041, 0.000065, 0.0001, 0.000149, 0.000217, 0.000306, 0.000421, 0.000564, 0.000733, 0.000928, 0.001142, 0.001368, 0.001593, 0.001805, 0.001989, 0.002131, 0.002222, 0.002253, 0.002222, 0.002131, 0.001989, 0.001805, 0.001593, 0.001368, 0.001142, 0.000928, 0.000733, 0.000564, 0.000421, 0.000306, 0.000217, 0.000149, 0.0001, 0.000065, 0.000041],
    [0.000049, 0.000078, 0.000119, 0.000178, 0.000259, 0.000367, 0.000504, 0.000675, 0.000878, 0.001111, 0.001368, 0.001638, 0.001908, 0.002161, 0.002381, 0.002552, 0.00266, 0.002697, 0.00266, 0.002552, 0.002381, 0.002161, 0.001908, 0.001638, 0.001368, 0.001111, 0.000878, 0.000675, 0.000504, 0.000367, 0.000259, 0.000178, 0.000119, 0.000078, 0.000049],
    [0.000057, 0.00009, 0.000139, 0.000208, 0.000302, 0.000427, 0.000587, 0.000786, 0.001023, 0.001294, 0.001593, 0.001908, 0.002222, 0.002517, 0.002773, 0.002972, 0.003098, 0.003142, 0.003098, 0.002972, 0.002773, 0.002517, 0.002222, 0.001908, 0.001593, 0.001294, 0.001023, 0.000786, 0.000587, 0.000427, 0.000302, 0.000208, 0.000139, 0.00009, 0.000057],
    [0.000065, 0.000103, 0.000158, 0.000235, 0.000342, 0.000484, 0.000665, 0.00089, 0.001158, 0.001466, 0.001805, 0.002161, 0.002517, 0.002851, 0.003142, 0.003367, 0.00351, 0.003559, 0.00351, 0.003367, 0.003142, 0.002851, 0.002517, 0.002161, 0.001805, 0.001466, 0.001158, 0.00089, 0.000665, 0.000484, 0.000342, 0.000235, 0.000158, 0.000103, 0.000065],
    [0.000071, 0.000113, 0.000174, 0.000259, 0.000377, 0.000533, 0.000733, 0.000981, 0.001276, 0.001615, 0.001989, 0.002381, 0.002773, 0.003142, 0.003462, 0.00371, 0.003867, 0.003921, 0.003867, 0.00371, 0.003462, 0.003142, 0.002773, 0.002381, 0.001989, 0.001615, 0.001276, 0.000981, 0.000733, 0.000533, 0.000377, 0.000259, 0.000174, 0.000113, 0.000071],
    [0.000077, 0.000121, 0.000186, 0.000278, 0.000404, 0.000571, 0.000786, 0.001051, 0.001368, 0.001731, 0.002131, 0.002552, 0.002972, 0.003367, 0.00371, 0.003976, 0.004145, 0.004203, 0.004145, 0.003976, 0.00371, 0.003367, 0.002972, 0.002552, 0.002131, 0.001731, 0.001368, 0.001051, 0.000786, 0.000571, 0.000404, 0.000278, 0.000186, 0.000121, 0.000077],
    [0.00008, 0.000126, 0.000194, 0.00029, 0.000421, 0.000596, 0.000819, 0.001096, 0.001426, 0.001805, 0.002222, 0.00266, 0.003098, 0.00351, 0.003867, 0.004145, 0.004321, 0.004381, 0.004321, 0.004145, 0.003867, 0.00351, 0.003098, 0.00266, 0.002222, 0.001805, 0.001426, 0.001096, 0.000819, 0.000596, 0.000421, 0.00029, 0.000194, 0.000126, 0.00008],
    [0.000081, 0.000128, 0.000197, 0.000294, 0.000427, 0.000604, 0.000831, 0.001111, 0.001446, 0.00183, 0.002253, 0.002697, 0.003142, 0.003559, 0.003921, 0.004203, 0.004381, 0.004442, 0.004381, 0.004203, 0.003921, 0.003559, 0.003142, 0.002697, 0.002253, 0.00183, 0.001446, 0.001111, 0.000831, 0.000604, 0.000427, 0.000294, 0.000197, 0.000128, 0.000081],
    [0.00008, 0.000126, 0.000194, 0.00029, 0.000421, 0.000596, 0.000819, 0.001096, 0.001426, 0.001805, 0.002222, 0.00266, 0.003098, 0.00351, 0.003867, 0.004145, 0.004321, 0.004381, 0.004321, 0.004145, 0.003867, 0.00351, 0.003098, 0.00266, 0.002222, 0.001805, 0.001426, 0.001096, 0.000819, 0.000596, 0.000421, 0.00029, 0.000194, 0.000126, 0.00008],
    [0.000077, 0.000121, 0.000186, 0.000278, 0.000404, 0.000571, 0.000786, 0.001051, 0.001368, 0.001731, 0.002131, 0.002552, 0.002972, 0.003367, 0.00371, 0.003976, 0.004145, 0.004203, 0.004145, 0.003976, 0.00371, 0.003367, 0.002972, 0.002552, 0.002131, 0.001731, 0.001368, 0.001051, 0.000786, 0.000571, 0.000404, 0.000278, 0.000186, 0.000121, 0.000077],
    [0.000071, 0.000113, 0.000174, 0.000259, 0.000377, 0.000533, 0.000733, 0.000981, 0.001276, 0.001615, 0.001989, 0.002381, 0.002773, 0.003142, 0.003462, 0.00371, 0.003867, 0.003921, 0.003867, 0.00371, 0.003462, 0.003142, 0.002773, 0.002381, 0.001989, 0.001615, 0.001276, 0.000981, 0.000733, 0.000533, 0.000377, 0.000259, 0.000174, 0.000113, 0.000071],
    [0.000065, 0.000103, 0.000158, 0.000235, 0.000342, 0.000484, 0.000665, 0.00089, 0.001158, 0.001466, 0.001805, 0.002161, 0.002517, 0.002851, 0.003142, 0.003367, 0.00351, 0.003559, 0.00351, 0.003367, 0.003142, 0.002851, 0.002517, 0.002161, 0.001805, 0.001466, 0.001158, 0.00089, 0.000665, 0.000484, 0.000342, 0.000235, 0.000158, 0.000103, 0.000065],
    [0.000057, 0.00009, 0.000139, 0.000208, 0.000302, 0.000427, 0.000587, 0.000786, 0.001023, 0.001294, 0.001593, 0.001908, 0.002222, 0.002517, 0.002773, 0.002972, 0.003098, 0.003142, 0.003098, 0.002972, 0.002773, 0.002517, 0.002222, 0.001908, 0.001593, 0.001294, 0.001023, 0.000786, 0.000587, 0.000427, 0.000302, 0.000208, 0.000139, 0.00009, 0.000057],
    [0.000049, 0.000078, 0.000119, 0.000178, 0.000259, 0.000367, 0.000504, 0.000675, 0.000878, 0.001111, 0.001368, 0.001638, 0.001908, 0.002161, 0.002381, 0.002552, 0.00266, 0.002697, 0.00266, 0.002552, 0.002381, 0.002161, 0.001908, 0.001638, 0.001368, 0.001111, 0.000878, 0.000675, 0.000504, 0.000367, 0.000259, 0.000178, 0.000119, 0.000078, 0.000049],
    [0.000041, 0.000065, 0.0001, 0.000149, 0.000217, 0.000306, 0.000421, 0.000564, 0.000733, 0.000928, 0.001142, 0.001368, 0.001593, 0.001805, 0.001989, 0.002131, 0.002222, 0.002253, 0.002222, 0.002131, 0.001989, 0.001805, 0.001593, 0.001368, 0.001142, 0.000928, 0.000733, 0.000564, 0.000421, 0.000306, 0.000217, 0.000149, 0.0001, 0.000065, 0.000041],
    [0.000033, 0.000053, 0.000081, 0.000121, 0.000176, 0.000249, 0.000342, 0.000458, 0.000596, 0.000754, 0.000928, 0.001111, 0.001294, 0.001466, 0.001615, 0.001731, 0.001805, 0.00183, 0.001805, 0.001731, 0.001615, 0.001466, 0.001294, 0.001111, 0.000928, 0.000754, 0.000596, 0.000458, 0.000342, 0.000249, 0.000176, 0.000121, 0.000081, 0.000053, 0.000033],
    [0.000026, 0.000042, 0.000064, 0.000096, 0.000139, 0.000197, 0.00027, 0.000362, 0.000471, 0.000596, 0.000733, 0.000878, 0.001023, 0.001158, 0.001276, 0.001368, 0.001426, 0.001446, 0.001426, 0.001368, 0.001276, 0.001158, 0.001023, 0.000878, 0.000733, 0.000596, 0.000471, 0.000362, 0.00027, 0.000197, 0.000139, 0.000096, 0.000064, 0.000042, 0.000026],
    [0.00002, 0.000032, 0.000049, 0.000073, 0.000107, 0.000151, 0.000208, 0.000278, 0.000362, 0.000458, 0.000564, 0.000675, 0.000786, 0.00089, 0.000981, 0.001051, 0.001096, 0.001111, 0.001096, 0.001051, 0.000981, 0.00089, 0.000786, 0.000675, 0.000564, 0.000458, 0.000362, 0.000278, 0.000208, 0.000151, 0.000107, 0.000073, 0.000049, 0.000032, 0.00002],
    [0.000015, 0.000024, 0.000037, 0.000055, 0.00008, 0.000113, 0.000155, 0.000208, 0.00027, 0.000342, 0.000421, 0.000504, 0.000587, 0.000665, 0.000733, 0.000786, 0.000819, 0.000831, 0.000819, 0.000786, 0.000733, 0.000665, 0.000587, 0.000504, 0.000421, 0.000342, 0.00027, 0.000208, 0.000155, 0.000113, 0.00008, 0.000055, 0.000037, 0.000024, 0.000015],
    [0.000011, 0.000017, 0.000027, 0.00004, 0.000058, 0.000082, 0.000113, 0.000151, 0.000197, 0.000249, 0.000306, 0.000367, 0.000427, 0.000484, 0.000533, 0.000571, 0.000596, 0.000604, 0.000596, 0.000571, 0.000533, 0.000484, 0.000427, 0.000367, 0.000306, 0.000249, 0.000197, 0.000151, 0.000113, 0.000082, 0.000058, 0.00004, 0.000027, 0.000017, 0.000011],
    [0.000008, 0.000012, 0.000019, 0.000028, 0.000041, 0.000058, 0.00008, 0.000107, 0.000139, 0.000176, 0.000217, 0.000259, 0.000302, 0.000342, 0.000377, 0.000404, 0.000421, 0.000427, 0.000421, 0.000404, 0.000377, 0.000342, 0.000302, 0.000259, 0.000217, 0.000176, 0.000139, 0.000107, 0.00008, 0.000058, 0.000041, 0.000028, 0.000019, 0.000012, 0.000008],
    [0.000005, 0.000008, 0.000013, 0.000019, 0.000028, 0.00004, 0.000055, 0.000073, 0.000096, 0.000121, 0.000149, 0.000178, 0.000208, 0.000235, 0.000259, 0.000278, 0.00029, 0.000294, 0.00029, 0.000278, 0.000259, 0.000235, 0.000208, 0.000178, 0.000149, 0.000121, 0.000096, 0.000073, 0.000055, 0.00004, 0.000028, 0.000019, 0.000013, 0.000008, 0.000005],
    [0.000004, 0.000006, 0.000009, 0.000013, 0.000019, 0.000027, 0.000037, 0.000049, 0.000064, 0.000081, 0.0001, 0.000119, 0.000139, 0.000158, 0.000174, 0.000186, 0.000194, 0.000197, 0.000194, 0.000186, 0.000174, 0.000158, 0.000139, 0.000119, 0.0001, 0.000081, 0.000064, 0.000049, 0.000037, 0.000027, 0.000019, 0.000013, 0.000009, 0.000006, 0.000004],
    [0.000002, 0.000004, 0.000006, 0.000008, 0.000012, 0.000017, 0.000024, 0.000032, 0.000042, 0.000053, 0.000065, 0.000078, 0.00009, 0.000103, 0.000113, 0.000121, 0.000126, 0.000128, 0.000126, 0.000121, 0.000113, 0.000103, 0.00009, 0.000078, 0.000065, 0.000053, 0.000042, 0.000032, 0.000024, 0.000017, 0.000012, 0.000008, 0.000006, 0.000004, 0.000002],
    [0.000001, 0.000002, 0.000004, 0.000005, 0.000008, 0.000011, 0.000015, 0.00002, 0.000026, 0.000033, 0.000041, 0.000049, 0.000057, 0.000065, 0.000071, 0.000077, 0.00008, 0.000081, 0.00008, 0.000077, 0.000071, 0.000065, 0.000057, 0.000049, 0.000041, 0.000033, 0.000026, 0.00002, 0.000015, 0.000011, 0.000008, 0.000005, 0.000004, 0.000002, 0.000001]
];

fn blur(bits: Bitmap<RGBA>) -> Vec<RGBA> {
    let imgw = bits.width;
    let buff = bits.buffer;

    (0..buff.len()).into_par_iter().fold(
        || Vec::<RGBA>::new(),
        |mut result_buff, cur_i| {
            let pix = buff[cur_i];
            let mut accum_r = 0.0;
            let mut accum_g = 0.0;
            let mut accum_b = 0.0;

            let mut ky = 0;
            for krow in BLUR_KERNEL.iter() {
                let mut kx = 0;
                for coeff in krow.iter() {
                    let (off_x, off_y) = get_offset(kx, ky);
                    let relative_ix = lookup(off_x as i32, off_y as i32, cur_i as u32, imgw as u32);
                    let px_val = if relative_ix < 0 {
                        pix
                    } else {
                        *buff.get(relative_ix as usize).unwrap_or(&pix)
                    };
                    accum_r += px_val.r as f32 * *coeff;
                    accum_g += px_val.g as f32 * *coeff;
                    accum_b += px_val.b as f32 * *coeff;
                    kx += 1;
                }
                ky += 1;
            }
            let result = RGBA::new(accum_r as u8, accum_g as u8, accum_b as u8, 255);
            result_buff.push(result);
            result_buff
        }).reduce(
        || Vec::<RGBA>::new(),
        |mut b1, b2| {
            b1.extend(b2);
            b1
        })
}

/// Returns the index that should be used for lookup given a current pixel and an offset from it
/// in (x, y) coords. IE: Turns 2d relative space into linear absolute space.
#[inline]
fn lookup(offset_x: i32, offset_y: i32, curpx_index: u32, img_width: u32) -> i32 {
    let (cur_x, cur_y) = ((curpx_index % img_width) as i32,
                          (curpx_index / img_width) as i32);
    (cur_x + offset_x) + (cur_y + offset_y) * (img_width as i32)
}

#[inline]
fn get_offset(kern_x: usize, kern_y: usize) -> (i8, i8) {
    let middle = KERN_SIZ / 2;
    (kern_x as i8 - middle as i8, kern_y as i8 - middle as i8)
}

fn make_bmp(pixels: Vec<RGBA>, w: usize, h: usize) -> Vec<u8> {
    let mut bmp: Vec<u8> = Vec::new();
    let output_channels: usize = 4;

    //bytes 0-13
    bmp.push(66 /*B*/);
    bmp.push(77 /*M*/); //0: bfType
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);
    bmp.push(0); //2: bfSize; size not yet known for now, filled in later.
    bmp.push(0);
    bmp.push(0); //6: bfReserved1
    bmp.push(0);
    bmp.push(0); //8: bfReserved2
    bmp.push(54 /*% 256*/);
    bmp.push(0 /*54/156*/);
    bmp.push(0);
    bmp.push(0); //10: bfOffBits (54 header bytes)

    //bytes 14-53
    bmp.push(40);
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);  //14: biSize
    bmp.push((w % 256) as u8);
    bmp.push((w / 256) as u8);
    bmp.push(0);
    bmp.push(0); //18: biWidth
    bmp.push((h % 256) as u8);
    bmp.push((h / 256) as u8);
    bmp.push(0);
    bmp.push(0); //22: biHeight
    bmp.push(1);
    bmp.push(0); //26: biPlanes
    bmp.push(output_channels as u8 * 8);
    bmp.push(0); //28: biBitCount
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);  //30: biCompression
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);  //34: biSizeImage
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);  //38: biXPelsPerMeter
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);  //42: biYPelsPerMeter
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);  //46: biClrUsed
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);
    bmp.push(0);  //50: biClrImportant

    /*
    Convert the input RGBRGBRGB pixel buffer to the BMP pixel buffer format. There are 3 differences with the input buffer:
    -BMP stores the rows inversed, from bottom to top
    -BMP stores the color channels in BGR instead of RGB order
    -BMP requires each row to have a multiple of 4 bytes, so sometimes padding bytes are added between rows
    */

    //the rows are stored inverted in bmp
    for y in (0..h).rev() {
        for x in 0..w {
            let curpx = pixels[x + y * w];
            bmp.push(curpx.b);
            bmp.push(curpx.g);
            bmp.push(curpx.r);
            bmp.push(curpx.a);
        }
    }

    // Fill in the size
    bmp[2] = (bmp.len() % 256) as u8;
    bmp[3] = ((bmp.len() / 256) % 256) as u8;
    bmp[4] = ((bmp.len() / 65536) % 256) as u8;
    bmp[5] = (bmp.len() / 16777216) as u8;
    bmp
}